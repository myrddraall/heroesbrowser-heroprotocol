import { IWorkerContext } from './IWorkerContext';
import { IWorkerContextHost } from './IWorkerContextHost';
import { Observable } from 'rxjs/Observable';
export declare class WorkerContext implements IWorkerContext {
    private workerPath;
    private _initialized;
    private _worker;
    private _port;
    private _initMessageQueue;
    private _workerMessages;
    private _channelMessages;
    private _callId;
    private _resultCache;
    private _callPromises;
    private _pendingCachePromises;
    private _contextCallers;
    readonly workerMessages: Observable<any>;
    readonly channelMessages: Observable<any>;
    constructor(workerPath: string, initData?: any, initTransfer?: any[]);
    private initialize(initData, initTransfer);
    private handleChannelMessage(msg);
    private computeCacheKey(...args);
    private hasCache(key);
    private getCache(key);
    private setCache(key, value);
    private handleWorkerCallResult(data);
    send(data: any, transfer?: any[]): void;
    call<TResult>(data: any, cacheResult?: boolean, transfer?: any[]): Promise<TResult>;
    getProperty<TResult>(context: IWorkerContextHost, propertyId: number, cacheResult?: boolean): Promise<TResult>;
    callMethod<TResult>(context: IWorkerContextHost, methodId: number, args?: any[], cacheResult?: boolean, transfer?: any[]): Promise<TResult>;
    addCallContext(context: IWorkerContextHost): void;
    removeCallContext(context: IWorkerContextHost): void;
    tryDispose(): boolean;
    dispose(): void;
}
